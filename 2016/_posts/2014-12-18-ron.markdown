---
layout: post
title:  "Interview: Gophers Ron Evans and Adrian Zankich"
tags: [Ron Evans, Adrian Zankich, GopherConIndia, golang]
---

![Ron Evans]({{ site.github_project_name }}/images/speakers/ron-evans.jpg) ![Adrian Zankich]({{ site.github_project_name }}/images/speakers/adrian-zankich.jpg)

**Qs**. Welcome and thanks for taking out time to share your thoughts. For the benefit of the readers, could you tell us something about your-selves?

_Ron and Adrian:_ We work at [The Hybrid Group](http://hybridgroup.com/), a software consultancy based in California. We are the creators of [Gobot](http://gobot.io) as well as several other frameworks and tools for open source robotics, such as [Gort](http://gort.io) and [Cylon.js](http://cylonjs.com). We've been on the "robot world tour" these last months, thanks to the popularity of our work, as well as the excitement behind the new maker movement and the Internet of Things (IoT).

**Qs**. Why and when did you decide to start working with Go?

_Ron and Adrian:_ We decided to start getting serious about Go around September of 2013. Working with our Ruby robotics framework [Artoo](http://artoo.io), we were running into some of Ruby's performance limitations. We knew that Go would have the concurrency support, speed and portability which we need for our hardware and IoT applications. And it was true! Even though Go was originally intended for writing system software, it is really great for writing software for robots and connected devices.

**Qs**. How should one go about learning the Go language? What material (books, eBooks, online tutorials etc.) would you recommend?

_Ron and Adrian:_ [http://tour.golang.org/](http://tour.golang.org/), [http://golang.org/doc/effective_go.html](http://golang.org/doc/effective_go.html) and reading the Go std lib are a great place to start. There is a really active and friendly community, too.

**Qs**. What best practices are most important for a new Go programmer to learn and understand?

_Ron and Adrian:_ Interfaces are a very powerful and important concept in Go programming. You may be tempted to use reflection as an early Go programmer, but 99% of the time you can use an interface instead of reflection and you will be much happier you did!

**Qs**. What are the pros and cons of Go that are being discussed in the development community and what is your opinion on that?

_Ron and Adrian:_ One issue that keeps cropping up is dependency/package management. We love the fact that you pull your package dependencies directly from a source code repository, but having it pull the latest master by default with no configuration is a weak spot. Being able to specify a branch or tag in some type of Go package meta data file would be a great addition which will be appreciated by many people!

**Qs**. Most beginners in Go would like to contribute their time, skills and expertise to a project but invariably are unaware of where and how to do so. Could you suggest some?

_Ron and Adrian:_ Documentation and tests are always a great place to start with a new project. It may not be as glamorous as developing new features, but writing tests or documentation for a project helps everyone and is always greatly appreciated by the project maintainers. Reading existing code well enough to write good tests for it is a great way to really learn how something works.

**Qs**. What has been your biggest challenge while working with Go?

_Ron and Adrian:_ The transition from writing Go code which looked like dynamic languages like Ruby, to writing idiomatic Go code. Just let Go!

**Qs**. What types of applications are currently being developed in Go and what changes do you foresee over the next year or two?

_Ron and Adrian:_ Currently there are a lot of backend servers being written in Go, but we think it will develop into a more general purpose application software language as well as targeting smaller size platforms. And of course, for robots and devices!

**Qs**. How do you see the market for Go Programmers in the work place? What is the future for Go?

_Ron and Adrian:_ Go will definitely increase in market share and we for sure see Go replacing older Java applications, or alternatively rewriting projects written in a dynamic language which require more performance.

**Qs**. Do you have any other suggestions for our readers?

_Ron and Adrian:_ You'll write a lot of bad Go code before you start writing idiomatic Go. Don't get discouraged! Go is a great language and it will make your programming life a lot simpler and faster. Use the built-in tools, Go is unique in that the tools help enforce a lot of good practices, if you use them correctly.

_Thanks Ron and Adrian for sharing your views with us. I am confident that your insights would help all the would-be Go programmers. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Ron and Adrian would be glad to answer._
